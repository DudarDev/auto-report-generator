# /workspaces/auto-report-generator/app/ui_components.py

import streamlit as st
import pandas as pd
import json
import logging
from pathlib import Path
from typing import Dict, Any, Tuple, Optional, List

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –¢–ê –Ü–ú–ü–û–†–¢–ò ---
from app.config import EXPECTED_APP_FIELDS, SUPPORTED_LANGUAGES
# –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±–∏–¥–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ gsheet
from app.gsheet import get_sheet_data, get_sheet_headers

# --- –ö–û–ù–°–¢–ê–ù–¢–ò ---
TEXTS_DIR = Path(__file__).parent.parent / "texts"
DEFAULT_LANG = "uk"

# --- –§–£–ù–ö–¶–Ü–á ---

@st.cache_data
def get_texts(language_code: str) -> dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –∫–µ—à—É—î —Ç–µ–∫—Å—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏ –∑ JSON-—Ñ–∞–π–ª—ñ–≤."""
    path = TEXTS_DIR / f"{language_code}.json"
    if not path.is_file():
        logging.warning(f"–§–∞–π–ª –º–æ–≤–∏ '{path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        path = TEXTS_DIR / f"{DEFAULT_LANG}.json"
    try:
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –º–æ–≤–∏ '{path}': {e}")
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–≤–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏.")
        return {}

def setup_page_config(texts: dict):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Streamlit."""
    st.set_page_config(
        page_title=texts.get("page_title", "Auto Report Generator"),
        page_icon="üìã",
        layout="centered"
    )

def language_selector():
    """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–∂–µ—Ç –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —ñ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω."""
    def _language_changed():
        st.session_state.lang_code = SUPPORTED_LANGUAGES[st.session_state.lang_widget]
    
    display_options = list(SUPPORTED_LANGUAGES.keys())
    current_lang_display = next((lang for lang, code in SUPPORTED_LANGUAGES.items() if code == st.session_state.get('lang_code', DEFAULT_LANG)), display_options[0])
    current_index = display_options.index(current_lang_display)

    st.sidebar.selectbox(
        label="–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Select language:",
        options=display_options,
        index=current_index,
        key="lang_widget",
        on_change=_language_changed
    )

def display_main_ui(texts: dict) -> Tuple:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –æ—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–≤–µ–¥–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–∞–Ω—ñ."""
    st.title(texts.get("app_title", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ó–≤—ñ—Ç—ñ–≤"))
    st.markdown(texts.get("app_subtitle", "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≥–æ—Ç–æ–≤–∏–π –∑–≤—ñ—Ç."))

    source_options = [
        texts.get("google_sheet_option", "Google Sheets"), 
        texts.get("csv_file_option", "CSV-—Ñ–∞–π–ª")
    ]
    data_source = st.radio(
        label=texts.get("select_data_source", "–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö:"),
        options=source_options,
        horizontal=True,
    )

    sheet_id, csv_file, column_mapping = None, None, {}
    headers = []

    is_google_sheets = (data_source == texts.get("google_sheet_option"))
    is_csv = (data_source == texts.get("csv_file_option"))

    if is_google_sheets:
        sheet_id = st.text_input(
            label=texts.get("enter_google_sheet_id", "–í–≤–µ–¥—ñ—Ç—å ID Google-—Ç–∞–±–ª–∏—Ü—ñ:"),
            help=texts.get("google_sheet_id_help", "–°–∫–æ–ø—ñ—é–π—Ç–µ ID –∑ URL –≤–∞—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.")
        )
        if sheet_id:
            try:
                with st.spinner(texts.get("spinner_get_headers", "–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤...")):
                    # –í–ò–ö–õ–ò–ö –ü–†–ê–í–ò–õ–¨–ù–û–á –§–£–ù–ö–¶–Ü–á
                    headers = get_sheet_headers(sheet_id=sheet_id)
            except Exception as e:
                st.warning(f"{texts.get('error_google_sheet_data', '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏')}: {e}")
    elif is_csv:
        csv_file = st.file_uploader(label=texts.get("upload_csv_file", "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à CSV-—Ñ–∞–π–ª:"), type=["csv"])
        if csv_file:
            try:
                headers = pd.read_csv(csv_file, nrows=0, encoding='utf-8').columns.tolist()
                csv_file.seek(0)
            except Exception as e:
                st.error(f"{texts.get('error_csv_header_read', '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV')}: {e}")

    if headers:
        column_mapping = _display_mapping_ui(texts, headers)

    email = st.text_input(
        label=texts.get("enter_client_email", "Email –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É:"), 
    )
    
    is_ready = bool((sheet_id or csv_file) and email)
    generate_button_pressed = st.button(
        texts.get("generate_button", "–°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç"),
        use_container_width=True,
        disabled=not is_ready
    )

    return generate_button_pressed, sheet_id, csv_file, email, column_mapping

def _display_mapping_ui(texts: dict, headers: List[str]) -> Dict[str, Optional[str]]:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î UI –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤."""
    mapping = {}
    
    with st.expander(texts.get("mapping_header", "–ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤"), expanded=True):
        st.caption(texts.get("mapping_caption", "–í–∫–∞–∂—ñ—Ç—å, —è–∫–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ–∂–Ω–æ–º—É –ø–æ–ª—é –∑–≤—ñ—Ç—É."))
        
        cols = st.columns(2)
        for i, (internal_key, text_key) in enumerate(EXPECTED_APP_FIELDS.items()):
            with cols[i % 2]:
                display_name = texts.get(text_key, internal_key.replace('_', ' ').title())
                options = [""] + headers 
                selected_col = st.selectbox(
                    label=f"{display_name}:",
                    options=options,
                    key=f"map_{internal_key}"
                )
                if selected_col:
                    mapping[internal_key] = selected_col
                    
    return mapping